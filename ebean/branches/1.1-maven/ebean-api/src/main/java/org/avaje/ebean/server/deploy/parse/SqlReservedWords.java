package org.avaje.ebean.server.deploy.parse;

import java.util.HashSet;

/**
 * Keywords deemed inappropriate for use as table alias'.
 * <p>
 * That is, they would cause sql syntax errors if used.
 * </p>
 */
public class SqlReservedWords {

	private static final String baseKeyWords = 
		"ABSOLUTE,ACTION,ADD,AFTER,ALIAS,ALL,ALLOCATE,ALTER,AND,ANY,ARE,ARRAY"
		+",AS,ASC,ASENSITIVE,ASSERTION,ASYMMETRIC,AT,ATOMIC,AUTHORIZATION"
		+",AVG,BEFORE,BEGIN,BETWEEN,BIGINT,BINARY,BIT,BIT_LENGTH,BLOB,BOOLEAN"
		+",BOTH,BREADTH,BY,CALL,CALLED,CASCADE,CASCADED,CASE,CAST,CATALOG,CHAR,CHAR_LENGTH"
		+",CHARACTER,CHARACTER_LENGTH,CHECK,CLOB,CLOSE,COALESCE,COLLATE"
		+",COLLATION,COLUMN,COMMIT,CONDITION,CONNECT,CONNECTION,CONSTRAINT"
		+",CONSTRAINTS,CONSTRUCTOR,CONTAINS,CONTINUE,CONVERT,CORRESPONDING"
		+",COUNT,CREATE,CROSS,CUBE,CURRENT,CURRENT_DATE,CURRENT_DEFAULT_TRANSFORM_GROUP"
		+",CURRENT_PATH,CURRENT_ROLE,CURRENT_TIME,CURRENT_TIMESTAMP"
		+",CURRENT_TRANSFORM_GROUP_FOR_TYPE,CURRENT_USER,CURSOR,CYCLE,DATA,DATE"
		+",DAY,DEALLOCATE,DEC,DECIMAL,DECLARE,DEFAULT,DEFERRABLE,DEFERRED,DELETE"
		+",DEPTH,DEREF,DESC,DESCRIBE,DESCRIPTOR,DETERMINISTIC,DIAGNOSTICS,DISCONNECT"
		+",DISTINCT,DO,DOMAIN,DOUBLE,DROP,DYNAMIC,EACH,ELEMENT,ELSE,ELSEIF,END,EQUALS"
		+",ESCAPE,EXCEPT,EXCEPTION,EXEC,EXECUTE,EXISTS,EXIT,EXTERNAL,EXTRACT,FETCH"
		+",FILTER,FIRST,FLOAT,FOR,FOREIGN,FOUND,FREE,FROM,FULL,FUNCTION,GENERAL"
		+",GET,GLOBAL,GO,GOTO,GRANT,GROUP,GROUPING,HANDLER,HAVING,HOLD,HOUR,IDENTITY"
		+",IF,IMMEDIATE,IN,INDICATOR,INITIALLY,INNER,INOUT,INPUT,INSENSITIVE,INSERT"
		+",INT,INTEGER,INTERSECT,INTERVAL,INTO,IS,ISOLATION,ITERATE,JOIN,KEY,LANGUAGE"
		+",LARGE,LAST,LATERAL,LEADING,LEAVE,LEFT,LEVEL,LIKE,LIMIT,LOCAL,LOCALTIME,LOCALTIMESTAMP"
		+",LOCATOR,LOOP,LOWER,MAP,MATCH,MAX,MEMBER,MERGE,METHOD,MIN,MINUTE,MODIFIES,MODULE"
		+",MONTH,MULTISET,NAMES,NATIONAL,NATURAL,NCHAR,NCLOB,NEW,NEXT,NO,NONE,NOT"
		+",NULL,NULLIF,NUMERIC,OBJECT,OCTET_LENGTH,OF,OLD,ON,ONLY,OPEN,OPTION"
		+",OR,ORDER,ORDINALITY,OUT,OUTER,OUTPUT,OVER,OVERLAPS,PAD,PARAMETER,PARTIAL"
		+",PARTITION,PATH,POSITION,PRECISION,PREPARE,PRESERVE,PRIMARY,PRIOR,PRIVILEGES"
		+",PROCEDURE,PUBLIC,RANGE,READ,READS,REAL,RECURSIVE,REF,REFERENCES,REFERENCING"
		+",RELATIVE,RELEASE,REPEAT,RESIGNAL,RESTRICT,RESULT,RETURN,RETURNS,REVOKE"
		+",RIGHT,ROLE,ROLLBACK,ROLLUP,ROUTINE,ROW,ROWID,ROWS,SAVEPOINT,SCHEMA,SCOPE,SCROLL"
		+",SEARCH,SECOND,SECTION,SELECT,SENSITIVE,SESSION,SESSION_USER,SET,SETS,SIGNAL"
		+",SIMILAR,SIZE,SMALLINT,SOME,SPACE,SPECIFIC,SPECIFICTYPE,SQL,SQLCODE,SQLERROR"
		+",SQLEXCEPTION,SQLSTATE,SQLWARNING,START,STATE,STATIC,SUBMULTISET,SUBSTRING"
		+",SUM,SYMMETRIC,SYSTEM,SYSTEM_USER,TABLE,TABLESAMPLE,TEMPORARY,THEN,TIME"
		+",TIMESTAMP,TIMEZONE_HOUR,TIMEZONE_MINUTE,TO,TRAILING,TRANSACTION,TRANSLATE"
		+",TRANSLATION,TREAT,TRIGGER,TRIM,UNDER,UNDO,UNION,UNIQUE,UNKNOWN,UNNEST,UNTIL"
		+",UPDATE,UPPER,USAGE,USER,USING,VALUE,VALUES,VARCHAR,VARYING,VIEW,WHEN,WHENEVER"
		+",WHERE,WHILE,WINDOW,WITH,WITHIN,WITHOUT,WORK,WRITE,YEAR,ZONE";

	
	private static HashSet<String> keywords = new HashSet<String>();
	static {
		
		String[] initialKeywords = baseKeyWords.split(",");
		for (int i = 0; i < initialKeywords.length; i++) {
			keywords.add(initialKeywords[i].trim());
		}
		
	}


	/**
	 * Return true if the tableAlias is a keyword.
	 */
	public static synchronized boolean isKeyword(String keyword){
		String s = keyword.trim().toUpperCase();
		return keywords.contains(s);
	}
	
	/**
	 * Add a sql keyword to the known set.
	 */
	public static synchronized void addKeyword(String keyword){
		if (keyword != null){
			keyword = keyword.trim().toUpperCase();
			if (keyword.length() > 0){
				keywords.add(keyword);				
			}
		}
	}
}
